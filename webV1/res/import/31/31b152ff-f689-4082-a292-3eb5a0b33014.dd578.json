{"__type__":"cc.EffectAsset","_name":"pipeline/tonemap","techniques":[{"name":"tonemap","passes":[{"program":"pipeline/tonemap|tonemap-vs:vert|tonemap-fs:frag","depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"u_texSampler":{"type":28,"samplerHash":33418},"u_blendTexSampler":{"type":28,"samplerHash":33418}}}]}],"shaders":[{"hash":862386759,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nout vec4 v_offset;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  v_offset = v_uv.xyxy + cc_nativeSize.zwzw * vec4(1.0, 0.0, 0.0, -1.0);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nin vec2 v_uv;\nin vec4 v_offset;\nuniform sampler2D u_texSampler;\nuniform sampler2D u_blendTexSampler;\nvec3 ToLDR(vec3 color) {\n  #if CC_USE_HDR\n    color *= cc_exposure.x * 1024.0;\n    color = ACESToneMap(color);\n    color = sqrt(color);\n  #endif\n  return color;\n}\nvec4 frag () {\n  #if CC_USE_SMAA\n    vec4 a;\n    a.rb = texture(u_blendTexSampler, v_uv).rb;\n    a.g = texture(u_blendTexSampler, v_offset.zw).g;\n    a.a = texture(u_blendTexSampler, v_offset.xy).a;\n    if (dot(a, vec4(1.0)) < 1e-5) {\n      vec4 o = texture(u_texSampler, v_uv);\n      o.rgb = ToLDR(o.rgb);\n      return o;\n    } else {\n      vec2 offset;\n      offset.x = a.a > a.b ? a.a : -a.b;\n      offset.y = a.g > a.r ? -a.g : a.r;\n      if (abs(offset.x) > abs(offset.y)) {\n        offset.y = 0.0;\n      } else {\n        offset.x = 0.0;\n      }\n      vec4 C = texture(u_texSampler, v_uv);\n      C.rgb = ToLDR(C.rgb);\n      vec2 uv = v_uv + sign(offset) * cc_nativeSize.zw;\n      vec4 Cop = texture(u_texSampler, uv);\n      Cop.rgb = ToLDR(Cop.rgb);\n      float s = abs(offset.x) > abs(offset.y) ? abs(offset.x) : abs(offset.y);\n      C.rgb = pow(C.rgb, vec3(2.2));\n      Cop.rgb = pow(Cop.rgb, vec3(2.2));\n      vec4 mixed = mix(C, Cop, s);\n      mixed.rgb = pow(mixed.rgb, vec3(1.0 / 2.2));\n      return mixed;\n    }\n  #else\n    vec4 o = texture(u_texSampler, v_uv);\n    o.rgb = ToLDR(o.rgb);\n    return o;\n  #endif\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform mediump vec4 cc_screenScale;\nuniform mediump vec4 cc_nativeSize;\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvarying vec4 v_offset;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 0, 1);\n  v_uv = a_texCoord * cc_screenScale.xy;\n  v_offset = v_uv.xyxy + cc_nativeSize.zwzw * vec4(1.0, 0.0, 0.0, -1.0);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_nativeSize;\nuniform mediump vec4 cc_exposure;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvarying vec2 v_uv;\nvarying vec4 v_offset;\nuniform sampler2D u_texSampler;\nuniform sampler2D u_blendTexSampler;\nvec3 ToLDR(vec3 color) {\n  #if CC_USE_HDR\n    color *= cc_exposure.x * 1024.0;\n    color = ACESToneMap(color);\n    color = sqrt(color);\n  #endif\n  return color;\n}\nvec4 frag () {\n  #if CC_USE_SMAA\n    vec4 a;\n    a.rb = texture2D(u_blendTexSampler, v_uv).rb;\n    a.g = texture2D(u_blendTexSampler, v_offset.zw).g;\n    a.a = texture2D(u_blendTexSampler, v_offset.xy).a;\n    if (dot(a, vec4(1.0)) < 1e-5) {\n      vec4 o = texture2D(u_texSampler, v_uv);\n      o.rgb = ToLDR(o.rgb);\n      return o;\n    } else {\n      vec2 offset;\n      offset.x = a.a > a.b ? a.a : -a.b;\n      offset.y = a.g > a.r ? -a.g : a.r;\n      if (abs(offset.x) > abs(offset.y)) {\n        offset.y = 0.0;\n      } else {\n        offset.x = 0.0;\n      }\n      vec4 C = texture2D(u_texSampler, v_uv);\n      C.rgb = ToLDR(C.rgb);\n      vec2 uv = v_uv + sign(offset) * cc_nativeSize.zw;\n      vec4 Cop = texture2D(u_texSampler, uv);\n      Cop.rgb = ToLDR(Cop.rgb);\n      float s = abs(offset.x) > abs(offset.y) ? abs(offset.x) : abs(offset.y);\n      C.rgb = pow(C.rgb, vec3(2.2));\n      Cop.rgb = pow(Cop.rgb, vec3(2.2));\n      vec4 mixed = mix(C, Cop, s);\n      mixed.rgb = pow(mixed.rgb, vec3(1.0 / 2.2));\n      return mixed;\n    }\n  #else\n    vec4 o = texture2D(u_texSampler, v_uv);\n    o.rgb = ToLDR(o.rgb);\n    return o;\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_USE_SMAA","type":"boolean"}],"blocks":[],"samplers":[{"name":"u_texSampler","type":28,"count":1,"defines":[],"binding":30},{"name":"u_blendTexSampler","type":28,"count":1,"defines":[],"binding":31}],"attributes":[{"name":"a_position","type":14,"count":1,"defines":[],"format":21,"location":0},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":1}],"record":null,"name":"pipeline/tonemap|tonemap-vs:vert|tonemap-fs:frag"}]}
